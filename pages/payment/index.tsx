import { observer } from 'mobx-react'
import Router from 'next/router'
import React, { useEffect, useState, Fragment, useRef } from 'react'
import appStore from '../../lib/stores/appstore'
import useStore from '../../lib/stores/stores'
import { Transition, Listbox } from '@headlessui/react'
import { CheckIcon, ChevronUpDownIcon } from '@heroicons/react/20/solid'
import { MasterCard, Paypal, Alipay, ApplePay, Wechat, Small } from '../../components/Svg'
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import { useTranslation } from 'next-i18next'


const Paystate = () => {
    const { loginSignStore, paymentStore } = useStore()
    return (
        <>
            {
                <Payment />
            }
        </>
    )
}

const people = [
    { name: 'Master-Card', svg: <MasterCard /> },
    { name: 'Paypal', svg: <Paypal /> },
    { name: 'ApplePay', svg: <ApplePay /> },
    { name: 'Aplipay', svg: <Alipay /> },
    { name: 'WechatPayment', svg: <Wechat /> },
]
const Payment = () => {
    const { t } = useTranslation('subscrible')
    const [selected, setSelected] = useState(people[0])
    const [userName, setUserName] = useState('')
    const [choiceFees, setChoiceFees] = useState(false)
    const [showPaymentMethod, setShowPaymentMethod] = useState(0)//0:master-card 1:paypal 2:applepay 3:aplipay 4:wechat
    const { loginSignStore, paymentStore, appStore } = useStore()
    const handleRefvalue = (evt: any) => {
        switch (evt.name) {
            case 'Master-Card':
                setShowPaymentMethod(0);
                break;
            case 'Paypal':
                setShowPaymentMethod(1);
                break;
            case 'ApplePay':
                setShowPaymentMethod(2);
                break;
            case 'Aplipay':
                setShowPaymentMethod(3);
                break;
            case 'WechatPayment':
                setShowPaymentMethod(4);
                break;
            default:
                setShowPaymentMethod(0);
        }
    }
    const conditionMessage = {
        message: ["No Ads", "Can use all free tools;", "Full access to  AwesomeIMG tools", "Unlimited document processingï¼›And faster upload..."]
    }
    const alipyPayment = () => {
        if (choiceFees) {
            appStore.getUsers()
            var money = 3
            if (appStore.user.id == undefined) {
                return Router.push('/login')
            }
            var id = appStore.user.id
            paymentStore.alipayMethod(id, money)
        } else {
            var money = 30
            if (appStore.user.id == undefined) {
                return Router.push('/login')
            }
            var id = appStore.user.id
            paymentStore.alipayMethod(id, money)
        }
    }
    useEffect(() => {
        if (appStore.user.id == undefined) {
            appStore.getUsers()
        }
    })
    return (
        <>
            <div className=' w-screen h-screen bg-nb-sidebar-grey flex flex-row  justify-center'>
                <div className='bg-nb-sidebar-grey   h-screen w-5/12'>
                    <div className=' flex flex-row justify-center items-center bg-loginbg-left bg-cover w-full h-full '>
                        <div className=' flex flex-col space-y-3 h-140 w-94.5  '>
                            <div className='flex flex-col justify-center items-center space-y-5 w-full h-30 '>
                                <img className='w-50' src='/Logo_awesomeImg.svg' />
                                <p className='font-p15-C8C8C8-sem'>{t('payment.payTitle')}</p>
                            </div>
                            <div className='flex flex-row justify-around w-full  h-40  '>
                                <div className={`flex flex-col justify-center items-center w-44 h-30 border border-CFD0E466 rounded-2xl cursor-pointer ${choiceFees ? "bg-nb-4C90FE" : "bg-nb-CFD0E466"}`} onClick={() => setChoiceFees(true)}>
                                    <p className='font-p20-FFFFFF-sem'>{t('payment.monthly')}</p>
                                    <div className='flex flex-row justify-around w-full '><span className={`${!choiceFees ? "font-p50-CFD0E4-sem " : "font-p50-FFFFFF-sem"}  font-normal font-sans`}>$ 3</span></div>
                                </div>
                                <div className={`flex flex-col justify-center items-center w-44 h-30 border border-CFD0E466 rounded-2xl cursor-pointer  ${!choiceFees ? "bg-nb-4C90FE" : "bg-nb-CFD0E466"}`} onClick={() => setChoiceFees(false)}>
                                    <p className='font-p20-FFFFFF-sem'>{t('payment.yearly')}</p>
                                    <div className='flex flex-row justify-around w-full '><span className={`${choiceFees ? "font-p50-CFD0E4-sem" : "font-p50-FFFFFF-sem"}  font-normal font-sans`}>$ 30</span></div>
                                </div>
                            </div>
                            <div className={`flex flex-col items-center  justify-start w-full ${showPaymentMethod === 0 ? "h-25" : "h-27"}`}>
                                <p className='relative  h-7 w-full font-p15-CFD0E4-sem'>{t('payment.method')}</p>
                                {/* <img src='/Vector.png' className='absolute'/> */}
                                <div className=" w-full h-10.5  ">
                                    <Listbox value={selected} onChange={setSelected} >
                                        <div className="relative w-full  h-10.5  ">
                                            <Listbox.Button className=" w-full h-10.5 border border-nb-CFD0E466 font-p15-ffffff-sem cursor-default  rounded-xl pl-3 bg-nb-CFD0E44D  text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                                                <span className="flex flex-row   block truncate">{selected.svg}{`\u00A0`}
                                                    {selected.name === 'Master-Card' && t('payment.payMthods.0')}
                                                    {selected.name === 'Paypal' && t('payment.payMthods.1')}
                                                    {selected.name === 'ApplePay' && t('payment.payMthods.2')}
                                                    {selected.name === 'Aplipay' && t('payment.payMthods.3')}
                                                    {selected.name === 'WechatPayment' && t('payment.payMthods.4')}
                                                </span>
                                                <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                                                    <div className="w-full border-dashed border border-CFD0E466 mr-2"><Small aria-hidden="true" /></div>
                                                </span>
                                            </Listbox.Button>
                                            <Transition
                                                as={Fragment}
                                                leave="transition ease-in duration-100"
                                                leaveFrom="opacity-100"
                                                leaveTo="opacity-0"
                                            >
                                                <Listbox.Options className="absolute border border-CFD0E466  mt-1 h-50 z-[10] w-full overflow-auto rounded-md bg-nb-282829 py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
                                                    {people.map((method, personIdx) => (
                                                        <Listbox.Option
                                                            key={personIdx}
                                                            className={({ active }) =>
                                                                `relative cursor-default select-none py-2 pl-3 pr-4 ${active ? 'bg-nb-121212 text-amber-900' : 'text-gray-900'
                                                                }`
                                                            }
                                                            value={method}
                                                            onClick={() => handleRefvalue(method)}

                                                        >
                                                            {({ selected }) => (
                                                                <>
                                                                    <div className='flex flex-row'>
                                                                        <div className="w-6 border-dashed border border-CFD0E466 ...">{method.svg}</div>
                                                                        <span
                                                                            className={`block truncate font-p15-ffffff-sem ${selected ? 'font-medium' : 'font-normal'
                                                                                }`}
                                                                        >
                                                                            {t(`payment.payMthods.${personIdx}`)}
                                                                        </span>
                                                                    </div>
                                                                    {selected ? (
                                                                        <span className="absolute inset-y-0 right-2  flex items-center pl-3 ">
                                                                            <CheckIcon className="h-5 w-5 text-safe " aria-hidden="true" />
                                                                        </span>
                                                                    ) : null}
                                                                </>
                                                            )}
                                                        </Listbox.Option>
                                                    ))}
                                                </Listbox.Options>
                                            </Transition>
                                        </div>
                                    </Listbox>
                                </div>
                            </div>

                            {
                                showPaymentMethod === 0 ? <div className='flex flex-col items-center  justify-start w-full h-30  '>
                                    <p className='relative  h-7 w-full font-p15-CFD0E4-sem'>{t('payment.cardDetail')}</p>
                                    {/* <img src='/Vector.png' className='absolute'/> */}
                                    <input type="text" onChange={(e) => { setUserName(e.target.value) }} value={userName} className={`w-full h-10.5 rounded-xl border px-10 pr-4 bg-email-logo bg-no-repeat bg-left-2 border-nb-CFD0E466 bg-nb-CFD0E44D ${userName === '' ? "" : "font-p15-ffffff-sem"} `} placeholder={`${t('payment.cardNumber')} \u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0 MM/YY CVC`} />
                                </div> : ""
                            }
                            <div className='w-full h-12.5'>
                                {
                                    showPaymentMethod === 0 ? <button onClick={() => { }} className="w-full h-12.5   font-p16-FFFFFF-re   bg-nb-4C90FE rounded-xl">{t('payment.Premium')}</button> :
                                        showPaymentMethod === 1 ? <button onClick={() => { }} className="flex flex-row justify-center items-center w-full h-12.5   font-p15-CFD0E4-sem   bg-nb-4C90FE rounded-xl"><ButtonPaypal /></button> :
                                            showPaymentMethod === 2 ? <button onClick={() => { }} className="flex flex-row justify-center items-center w-full h-12.5   font-p15-CFD0E4-sem   bg-nb-4C90FE rounded-xl"><ButtonApplePay /></button> :
                                                showPaymentMethod === 3 ? <button onClick={() => alipyPayment()} className="flex flex-row justify-center items-center w-full h-12.5   font-p15-CFD0E4-sem   bg-nb-4C90FE rounded-xl"><ButtonAlipay /></button> :
                                                    showPaymentMethod === 4 ? <button onClick={() => { }} className="flex flex-row justify-center items-center w-full h-12.5   font-p15-CFD0E4-sem   bg-nb-4C90FE rounded-xl"><ButtonWechat /></button> : ""
                                }
                            </div>
                            <div className='flex flex-col justify-center items-center w-full  '>
                                <span className=" inset-y-0 right-2  flex items-center pl-3 space-x-2 ">
                                    <CheckIcon className="h-5 w-5 text-3DB39E" aria-hidden="true" />
                                    <p className='font-p12-A2A3BC-re'>{t('payment.cancel')}</p>
                                </span>
                                <span className="inset-y-0 right-2  flex items-center pl-3 space-x-1 ">
                                    <CheckIcon className="h-5 w-5 text-3DB39E" aria-hidden="true" />
                                    <p className='font-p12-A2A3BC-re'>{t('payment.back')}</p>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <div className=' flex flex-col   justify-center items-center bg-paymentbg-right bg-cover h-full  w-5/12'>
                    <div className='flex flex-col justify-start  items-center  h-160 w-94.5 '>
                        <div className='w-65 h-74.5 '><img src='/imgPremium.svg' /></div>
                        <div className='flex flex-col items-center h-60 w-94.5 '>
                            <p className='font-p26-FFFFFF-sem font-sans'>{t('payment.Upgrade')}</p>
                            {
                                conditionMessage.message.map((items, indexs) =>
                                    <div key={indexs} className='ml-20 mt-5 flex flex-row justify-start space-x-4 h-15 w-4/5  text-left' ><div><Chosen /></div><p className='font-normal font-p14-CFD0E4-sem'>{t(`payment.rightTitle.${indexs}`)}</p></div>
                                )
                            }
                        </div>
                    </div>

                </div>
            </div>
        </>

    )
}
const Chosen = () => (
    <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
        <circle cx="11" cy="11" r="11" fill="url(#paint0_linear_2_19667)" />
        <path d="M6.02905 11.0784L10.141 15.3413L16.0291 7.34131" stroke="#222325" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        <defs>
            <linearGradient id="paint0_linear_2_19667" x1="11" y1="0" x2="11" y2="22" gradientUnits="userSpaceOnUse">
                <stop stop-color="#342E53" />
                <stop offset="0.046875" stop-color="#5D2644" />
                <stop offset="0.161458" stop-color="#AE2427" />
                <stop offset="0.25" stop-color="#D02C10" />
                <stop offset="0.369792" stop-color="#F16B02" />
                <stop offset="0.489583" stop-color="#F1A243" />
                <stop offset="0.609375" stop-color="#F5D0A6" />
                <stop offset="0.729167" stop-color="#DCEAE2" />
                <stop offset="0.84375" stop-color="#C7E1DB" />
                <stop offset="0.979167" stop-color="#9CC7BF" />
            </linearGradient>
        </defs>
    </svg>
)
const ButtonPaypal = () => (
    <svg width="100" height="25" viewBox="0 0 100 25" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g clip-path="url(#clip0_2_18539)">
            <path d="M77.0072 5.43616H71.4969C71.1263 5.43616 70.805 5.70797 70.7309 6.07861L68.507 20.1879C68.4576 20.4597 68.68 20.7068 68.9518 20.7068H71.7687C72.0405 20.7068 72.2629 20.5091 72.2876 20.262L72.9301 16.259C72.9795 15.8884 73.3007 15.6166 73.6961 15.6166H75.4258C79.0581 15.6166 81.1337 13.8622 81.6773 10.3781C81.9244 8.87082 81.6773 7.66004 80.9855 6.8199C80.2442 5.90564 78.8604 5.43616 77.0072 5.43616V5.43616ZM77.6497 10.5758C77.3531 12.5526 75.8458 12.5526 74.388 12.5526H73.5478L74.1409 8.87082C74.1656 8.64843 74.3633 8.47546 74.5856 8.47546H74.9563C75.9447 8.47546 76.8837 8.47546 77.3778 9.04379C77.6744 9.38972 77.7485 9.88392 77.6497 10.5758V10.5758Z" fill="white" />
            <path d="M37.7927 5.43616H32.2824C31.9118 5.43616 31.5906 5.70797 31.5164 6.07861L29.2926 20.1879C29.2431 20.4597 29.4655 20.7068 29.7373 20.7068H32.3566C32.7272 20.7068 33.0484 20.435 33.1226 20.0643L33.7156 16.259C33.765 15.8884 34.0863 15.6166 34.4816 15.6166H36.2113C39.8436 15.6166 41.9193 13.8622 42.4629 10.3781C42.71 8.87082 42.4629 7.66004 41.771 6.8199C41.0297 5.90564 39.646 5.43616 37.7927 5.43616V5.43616ZM38.4352 10.5758C38.1387 12.5526 36.6314 12.5526 35.1735 12.5526H34.3334L34.9264 8.87082C34.9511 8.64843 35.1488 8.47546 35.3712 8.47546H35.7418C36.7302 8.47546 37.6692 8.47546 38.1634 9.04378C38.4599 9.38972 38.534 9.88392 38.4352 10.5758V10.5758ZM54.2247 10.5017H51.5808C51.3584 10.5017 51.1607 10.6746 51.136 10.897L51.0125 11.6383L50.8395 11.3665C50.2712 10.5511 49.011 10.2546 47.7261 10.2546C44.8103 10.2546 42.3393 12.4537 41.8451 15.5425C41.598 17.0745 41.944 18.557 42.8335 19.5949C43.6489 20.5338 44.7856 20.9292 46.1446 20.9292C48.4921 20.9292 49.777 19.4219 49.777 19.4219L49.6534 20.1632C49.604 20.435 49.8264 20.6821 50.0982 20.6821H52.4703C52.841 20.6821 53.1622 20.4103 53.2363 20.0396L54.6695 11.0206C54.7189 10.7735 54.5212 10.5017 54.2247 10.5017V10.5017ZM50.5677 15.6413C50.3206 17.1486 49.1098 18.1617 47.6025 18.1617C46.8365 18.1617 46.2188 17.9146 45.8234 17.4451C45.428 16.9756 45.2798 16.3332 45.4033 15.5919C45.6504 14.1093 46.8612 13.0468 48.3438 13.0468C49.0851 13.0468 49.7028 13.2939 50.0982 13.7634C50.5183 14.2575 50.6912 14.9 50.5677 15.6413V15.6413Z" fill="white" />
            <path d="M93.4392 10.5017H90.7953C90.5729 10.5017 90.3752 10.6746 90.3505 10.897L90.2269 11.6383L90.054 11.3665C89.4856 10.5511 88.2254 10.2546 86.9405 10.2546C84.0248 10.2546 81.5538 12.4537 81.0596 15.5425C80.8125 17.0745 81.1584 18.557 82.048 19.5949C82.8634 20.5338 84.0001 20.9292 85.3591 20.9292C87.7065 20.9292 88.9914 19.4219 88.9914 19.4219L88.8679 20.1632C88.8185 20.435 89.0409 20.6821 89.3127 20.6821H91.6848C92.0555 20.6821 92.3767 20.4103 92.4508 20.0396L93.884 11.0206C93.9334 10.7735 93.7357 10.5017 93.4392 10.5017V10.5017ZM89.7822 15.6413C89.5351 17.1486 88.3243 18.1617 86.817 18.1617C86.051 18.1617 85.4332 17.9146 85.0379 17.4451C84.6425 16.9756 84.4943 16.3332 84.6178 15.5919C84.8649 14.1093 86.0757 13.0468 87.5583 13.0468C88.2996 13.0468 88.9173 13.2939 89.3127 13.7634C89.7327 14.2575 89.9057 14.9 89.7822 15.6413V15.6413Z" fill="white" />
            <path d="M68.2599 10.5016H65.6159C65.3688 10.5016 65.1218 10.6252 64.9735 10.8476L61.3164 16.2343L59.7597 11.07C59.6609 10.7487 59.3644 10.5264 59.0184 10.5264H56.4239C56.1027 10.5264 55.8803 10.8476 55.9791 11.1441L58.8949 19.6937L56.1521 23.5484C55.9297 23.8449 56.1521 24.265 56.5228 24.265H59.1667C59.4138 24.265 59.6609 24.1414 59.7844 23.9438L68.5811 11.2429C68.8529 10.9217 68.6305 10.5016 68.2599 10.5016V10.5016Z" fill="white" />
            <path d="M96.5526 5.80679L94.304 20.1632C94.2546 20.435 94.477 20.6821 94.7488 20.6821H97.0221C97.3928 20.6821 97.714 20.4103 97.7881 20.0396L100.012 5.93034C100.061 5.65854 99.839 5.41144 99.5672 5.41144H97.0221C96.775 5.43615 96.5773 5.58441 96.5526 5.80679Z" fill="white" />
            <path d="M18.5439 6.15273C18.8404 4.27479 18.5439 2.98988 17.5308 1.82852C16.3941 0.543615 14.3679 0 11.7734 0H4.23693C3.71803 0 3.24854 0.395356 3.17441 0.914262L0.01156 20.8303C-0.0625693 21.2257 0.258658 21.5716 0.654014 21.5716H5.29945L4.97822 23.5978C4.9288 23.9438 5.20061 24.2403 5.54655 24.2403H9.4754C9.94489 24.2403 10.3402 23.8944 10.4144 23.4496L10.4638 23.2519L11.2051 18.557L11.2545 18.3099C11.3286 17.8405 11.724 17.5192 12.1935 17.5192H12.7865C16.5918 17.5192 19.557 15.9872 20.4218 11.5148C20.7925 9.63681 20.5948 8.0801 19.6311 6.99287C19.3346 6.67164 18.964 6.37512 18.5439 6.15273" fill="white" fill-opacity="0.56" />
            <path d="M18.5439 6.15273C18.8404 4.27479 18.5439 2.98988 17.5308 1.82852C16.3941 0.543615 14.3679 0 11.7734 0H4.23693C3.71803 0 3.24854 0.395356 3.17441 0.914262L0.01156 20.8303C-0.0625693 21.2257 0.258658 21.5716 0.654014 21.5716H5.29945L6.46081 14.1587L6.4361 14.3811C6.51023 13.8622 6.95501 13.4668 7.49862 13.4668H9.7225C14.0714 13.4668 17.4814 11.7124 18.4698 6.59751L18.5439 6.15273Z" fill="white" fill-opacity="0.4" />
            <path d="M7.74572 6.17744C7.79514 5.85622 7.99282 5.60912 8.26462 5.46086C8.38817 5.41144 8.53643 5.36202 8.65998 5.36202H14.5903C15.2822 5.36202 15.9494 5.41144 16.5424 5.51028C16.7154 5.53499 16.8883 5.5597 17.0366 5.60912C17.2096 5.63383 17.3578 5.68325 17.5061 5.73267L17.7285 5.8068C18.025 5.90564 18.2968 6.02919 18.5439 6.15273C18.8404 4.27479 18.5439 2.98988 17.5308 1.82852C16.3941 0.543615 14.3679 0 11.7734 0H4.23693C3.71803 0 3.24854 0.395356 3.17441 0.914262L0.01156 20.8303C-0.0625693 21.2257 0.258658 21.5716 0.654014 21.5716H5.29945L6.46081 14.1587L7.74572 6.17744Z" fill="white" />
        </g>
        <defs>
            <clipPath id="clip0_2_18539">
                <rect width="100" height="24.265" fill="white" />
            </clipPath>
        </defs>
    </svg>
)
const ButtonAlipay = () => (
    <svg width="89" height="24" viewBox="0 0 89 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M41.8711 7.08594L35.9043 19H33.0332L40.6699 4.78125H42.5059L41.8711 7.08594ZM43.1113 19L41.2363 6.80273L41.3633 4.78125H43.082L45.7969 19H43.1113ZM43.8242 13.7168L43.4434 15.8359H36.0312L36.4023 13.7168H43.8242ZM52.3203 4L49.7227 19H47.1934L49.791 4H52.3203ZM56.5879 8.43359L54.7617 19H52.2324L54.0684 8.43359H56.5879ZM54.3809 5.71875C54.3743 5.30859 54.5078 4.97656 54.7812 4.72266C55.0612 4.46224 55.403 4.32878 55.8066 4.32227C56.1908 4.31576 56.5228 4.43294 56.8027 4.67383C57.0892 4.9082 57.2324 5.22721 57.2324 5.63086C57.2389 6.03451 57.1022 6.36328 56.8223 6.61719C56.5423 6.87109 56.2038 7.0013 55.8066 7.00781C55.4225 7.01432 55.0905 6.90039 54.8105 6.66602C54.5306 6.43164 54.3874 6.11589 54.3809 5.71875ZM61.1094 10.6113L58.9414 23.0625H56.4219L58.9609 8.43359H61.2852L61.1094 10.6113ZM67.1543 13.5508L67.125 13.7559C67.0534 14.3939 66.9069 15.0384 66.6855 15.6895C66.4642 16.334 66.1615 16.9264 65.7773 17.4668C65.3997 18.0007 64.9342 18.4303 64.3809 18.7559C63.8275 19.0749 63.1764 19.2246 62.4277 19.2051C61.7702 19.1855 61.2201 19.0195 60.7773 18.707C60.3346 18.3945 59.9831 17.9876 59.7227 17.4863C59.4688 16.985 59.2897 16.4414 59.1855 15.8555C59.0814 15.2695 59.0423 14.6966 59.0684 14.1367L59.1465 13.4727C59.2507 12.8737 59.4232 12.2617 59.6641 11.6367C59.9115 11.0117 60.2305 10.4388 60.6211 9.91797C61.0117 9.39714 61.4772 8.98047 62.0176 8.66797C62.5579 8.35547 63.1797 8.20898 63.8828 8.22852C64.6055 8.24805 65.1947 8.42057 65.6504 8.74609C66.1126 9.07161 66.4609 9.49479 66.6953 10.0156C66.9362 10.5365 67.0859 11.1061 67.1445 11.7246C67.2096 12.3431 67.2129 12.9518 67.1543 13.5508ZM64.6055 13.7461L64.6348 13.5312C64.6673 13.2253 64.6803 12.89 64.6738 12.5254C64.6673 12.1543 64.6185 11.8027 64.5273 11.4707C64.4362 11.1322 64.2767 10.8522 64.0488 10.6309C63.821 10.4095 63.4954 10.2923 63.0723 10.2793C62.6751 10.2598 62.3203 10.3249 62.0078 10.4746C61.6953 10.6178 61.4251 10.8197 61.1973 11.0801C60.9694 11.334 60.7806 11.627 60.6309 11.959C60.4876 12.2845 60.3835 12.623 60.3184 12.9746L60.0742 14.6152C60.0482 15.0319 60.0905 15.4323 60.2012 15.8164C60.3118 16.2005 60.5039 16.5195 60.7773 16.7734C61.0573 17.0273 61.4316 17.1608 61.9004 17.1738C62.3561 17.1803 62.7435 17.0794 63.0625 16.8711C63.388 16.6628 63.6549 16.3861 63.8633 16.041C64.0781 15.6895 64.2441 15.3118 64.3613 14.9082C64.4785 14.5046 64.5599 14.1172 64.6055 13.7461ZM74.1172 16.7539L74.8887 11.8418C74.9277 11.5293 74.9082 11.2461 74.8301 10.9922C74.7585 10.7318 74.6217 10.5234 74.4199 10.3672C74.2181 10.2109 73.9447 10.1296 73.5996 10.123C73.2936 10.1165 73.0104 10.1686 72.75 10.2793C72.4961 10.39 72.2812 10.5495 72.1055 10.7578C71.9297 10.9661 71.8092 11.2201 71.7441 11.5195L69.2246 11.5391C69.2637 10.9661 69.4297 10.4714 69.7227 10.0547C70.0156 9.63151 70.3867 9.28646 70.8359 9.01953C71.2852 8.74609 71.7734 8.54427 72.3008 8.41406C72.8281 8.28385 73.3457 8.22526 73.8535 8.23828C74.5762 8.2513 75.2207 8.4043 75.7871 8.69727C76.3535 8.99023 76.7865 9.4069 77.0859 9.94727C77.3854 10.4811 77.4961 11.1322 77.418 11.9004L76.666 16.5098C76.6074 16.8874 76.5651 17.278 76.5391 17.6816C76.513 18.0788 76.5651 18.4596 76.6953 18.8242L76.6855 19L74.1953 19.0098C74.0846 18.6452 74.0293 18.2708 74.0293 17.8867C74.0358 17.5026 74.0651 17.125 74.1172 16.7539ZM75.1816 12.5645L74.9277 14.0977L73.4727 14.0879C73.1732 14.0879 72.8704 14.1204 72.5645 14.1855C72.265 14.2507 71.985 14.3548 71.7246 14.498C71.4642 14.6348 71.2461 14.8203 71.0703 15.0547C70.8945 15.2891 70.7871 15.5755 70.748 15.9141C70.7155 16.1745 70.7448 16.4023 70.8359 16.5977C70.9271 16.793 71.0638 16.9492 71.2461 17.0664C71.4349 17.1771 71.6595 17.2357 71.9199 17.2422C72.278 17.2487 72.6296 17.1803 72.9746 17.0371C73.3197 16.8874 73.6191 16.679 73.873 16.4121C74.1335 16.1452 74.3125 15.8359 74.4102 15.4844L75.0059 16.6172C74.8626 17.0013 74.6673 17.3529 74.4199 17.6719C74.1725 17.9909 73.8861 18.2676 73.5605 18.502C73.235 18.7298 72.8802 18.9056 72.4961 19.0293C72.1185 19.1595 71.7214 19.2214 71.3047 19.2148C70.7188 19.2018 70.1816 19.0651 69.6934 18.8047C69.2116 18.5443 68.8307 18.1829 68.5508 17.7207C68.2708 17.2585 68.1439 16.7246 68.1699 16.1191C68.2025 15.429 68.375 14.8561 68.6875 14.4004C69.0065 13.9382 69.4167 13.5736 69.918 13.3066C70.4193 13.0397 70.9661 12.8477 71.5586 12.7305C72.1576 12.6133 72.7467 12.5547 73.3262 12.5547L75.1816 12.5645ZM81.5488 17.7012L85.8652 8.43359H88.6484L82.457 20.6113C82.2812 20.9889 82.0794 21.3405 81.8516 21.666C81.6237 21.9915 81.3633 22.278 81.0703 22.5254C80.7839 22.7728 80.4583 22.9616 80.0938 23.0918C79.7357 23.2285 79.332 23.2969 78.8828 23.2969C78.668 23.2969 78.4564 23.2773 78.248 23.2383C78.0397 23.1992 77.8346 23.1569 77.6328 23.1113L77.8086 21.168C77.8802 21.1745 77.9518 21.181 78.0234 21.1875C78.0951 21.194 78.1634 21.2005 78.2285 21.207C78.5801 21.2135 78.8893 21.168 79.1562 21.0703C79.4232 20.9792 79.6543 20.8327 79.8496 20.6309C80.0514 20.4355 80.2305 20.1849 80.3867 19.8789L81.5488 17.7012ZM81.7734 8.43359L82.7793 16.3438L82.7012 18.9707L80.9824 19.2832L79.1465 8.43359H81.7734Z" fill="white" />
        <path d="M24 16.3333L16.28 13.7373C16.28 13.7373 16.8733 12.8493 17.5067 11.108C18.14 9.36666 18.2307 8.41066 18.2307 8.41066L13.2333 8.37066V6.66133L19.2867 6.61866V5.41333H13.2333V2.66667H10.2667V5.41333H4.62133V6.62L10.268 6.58V8.41066H5.73867V9.36666H15.0613C15.0613 9.36666 14.9587 10.1427 14.6013 11.108C14.3746 11.7175 14.1328 12.3212 13.876 12.9187C13.876 12.9187 9.49867 11.3867 7.192 11.3867C4.88534 11.3867 2.08 12.3133 1.808 15.0027C1.53734 17.6907 3.11467 19.1466 5.33734 19.6826C7.56 20.2213 9.612 19.6773 11.3987 18.8026C13.1853 17.9293 14.9387 15.944 14.9387 15.944L23.936 20.3133C23.7582 21.3458 23.2211 22.2822 22.4195 22.9569C21.618 23.6315 20.6037 24.001 19.556 24H4.444C3.86093 24.0005 3.28347 23.8862 2.74458 23.6635C2.2057 23.4409 1.71594 23.1143 1.30328 22.7024C0.890612 22.2904 0.563123 21.8013 0.339507 21.2628C0.115891 20.7243 0.000526854 20.147 1.80359e-06 19.564V4.444C-0.000523721 3.86093 0.1138 3.28347 0.336445 2.74458C0.559091 2.20569 0.885698 1.71594 1.29762 1.30327C1.70954 0.890611 2.19871 0.563123 2.73719 0.339507C3.27568 0.115891 3.85293 0.000526854 4.436 1.80359e-06H19.556C20.1391 -0.00052372 20.7165 0.1138 21.2554 0.336445C21.7943 0.55909 22.2841 0.885697 22.6967 1.29762C23.1094 1.70954 23.4369 2.1987 23.6605 2.73719C23.8841 3.27567 23.9995 3.85293 24 4.436V16.3333ZM12.748 14.8293C12.748 14.8293 9.94 18.376 6.63067 18.376C3.32 18.376 2.62533 16.6907 2.62533 15.4787C2.62533 14.268 3.31334 12.952 6.13067 12.7613C8.94533 12.5707 12.7507 14.8293 12.7507 14.8293H12.748Z" fill="white" />
    </svg>
)
const ButtonWechat = () => (
    <svg width="136" height="28" viewBox="0 0 136 28" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M34.2285 18.1484L38.7207 6.78125H40.2148L39.9707 9.31055L35.2246 21H33.6328L34.2285 18.1484ZM34.2676 6.78125L34.7363 18.3535L34.3555 21H32.6172L31.7188 6.78125H34.2676ZM41.416 18.0703L45.3809 6.78125H48.0469L42.6953 21H40.9668L41.416 18.0703ZM40.9375 6.78125L41.8945 18.4414L41.6797 21H40.0977L39.0137 9.08594L39.4434 6.78125H40.9375ZM51.6699 21.1953C50.9473 21.1823 50.3027 21.0423 49.7363 20.7754C49.1699 20.5085 48.6979 20.1439 48.3203 19.6816C47.9427 19.2194 47.666 18.6823 47.4902 18.0703C47.321 17.4583 47.2624 16.804 47.3145 16.1074L47.3535 15.707C47.4251 14.9844 47.5977 14.2943 47.8711 13.6367C48.151 12.9727 48.5221 12.3835 48.9844 11.8691C49.4531 11.3483 50.0033 10.9414 50.6348 10.6484C51.2728 10.3555 51.9792 10.2188 52.7539 10.2383C53.4896 10.2513 54.1146 10.4043 54.6289 10.6973C55.1432 10.9837 55.5534 11.3711 55.8594 11.8594C56.1719 12.3411 56.3835 12.888 56.4941 13.5C56.6048 14.112 56.6243 14.75 56.5527 15.4141L56.4062 16.498H48.3594L48.6426 14.7207L54.1406 14.7305L54.1797 14.5059C54.2383 14.1217 54.2188 13.7604 54.1211 13.4219C54.0299 13.0833 53.8574 12.8099 53.6035 12.6016C53.3561 12.3867 53.0208 12.2728 52.5977 12.2598C52.1289 12.2467 51.7318 12.3477 51.4062 12.5625C51.0807 12.7708 50.8105 13.0475 50.5957 13.3926C50.3874 13.7376 50.2246 14.1152 50.1074 14.5254C49.9902 14.929 49.9089 15.3229 49.8633 15.707L49.8242 16.0977C49.7917 16.4622 49.8014 16.8236 49.8535 17.1816C49.9121 17.5397 50.0195 17.8652 50.1758 18.1582C50.3385 18.4512 50.5632 18.6888 50.8496 18.8711C51.1361 19.0534 51.4909 19.151 51.9141 19.1641C52.4479 19.1771 52.9362 19.0697 53.3789 18.8418C53.8281 18.6074 54.235 18.3014 54.5996 17.9238L55.7812 19.2617C55.4818 19.7044 55.1107 20.0723 54.668 20.3652C54.2253 20.6517 53.7435 20.8633 53.2227 21C52.7083 21.1367 52.1908 21.2018 51.6699 21.1953ZM61.8457 19.1738C62.2103 19.1803 62.5391 19.112 62.832 18.9688C63.125 18.819 63.3691 18.6139 63.5645 18.3535C63.7598 18.0931 63.8932 17.7871 63.9648 17.4355L66.3477 17.4258C66.276 18.2005 66.0156 18.8743 65.5664 19.4473C65.1237 20.0137 64.5671 20.4531 63.8965 20.7656C63.2259 21.0716 62.5163 21.2148 61.7676 21.1953C61.0124 21.1823 60.3646 21.0293 59.8242 20.7363C59.2904 20.4434 58.8574 20.0527 58.5254 19.5645C58.1999 19.0697 57.972 18.5065 57.8418 17.875C57.7116 17.2435 57.679 16.5859 57.7441 15.9023L57.7832 15.5801C57.8613 14.8509 58.0339 14.1608 58.3008 13.5098C58.5742 12.8587 58.9388 12.2858 59.3945 11.791C59.8503 11.2897 60.3874 10.9023 61.0059 10.6289C61.6309 10.349 62.334 10.2188 63.1152 10.2383C63.9095 10.2513 64.5931 10.4336 65.166 10.7852C65.7389 11.1367 66.1751 11.6152 66.4746 12.2207C66.7806 12.8197 66.9303 13.5098 66.9238 14.291L64.5508 14.2812C64.5573 13.9362 64.5052 13.6139 64.3945 13.3145C64.2904 13.0085 64.1178 12.7611 63.877 12.5723C63.6426 12.3835 63.3301 12.2793 62.9395 12.2598C62.4837 12.2467 62.0964 12.3411 61.7773 12.543C61.4583 12.7383 61.1947 13.0052 60.9863 13.3438C60.7845 13.6758 60.6283 14.0371 60.5176 14.4277C60.4069 14.8184 60.3288 15.2025 60.2832 15.5801L60.2637 15.8926C60.2311 16.2181 60.2148 16.5664 60.2148 16.9375C60.2148 17.3086 60.2604 17.6634 60.3516 18.002C60.4492 18.334 60.6152 18.6107 60.8496 18.832C61.084 19.0469 61.416 19.1608 61.8457 19.1738ZM72.4609 6L69.8535 21H67.334L69.9414 6H72.4609ZM70.4688 15.3359L69.7559 15.3457C69.8275 14.7337 69.974 14.125 70.1953 13.5195C70.4167 12.9076 70.7129 12.3509 71.084 11.8496C71.4551 11.3483 71.9076 10.9479 72.4414 10.6484C72.9818 10.349 73.6035 10.209 74.3066 10.2285C74.8991 10.2415 75.3906 10.3587 75.7812 10.5801C76.1719 10.8014 76.4746 11.1009 76.6895 11.4785C76.9108 11.8496 77.0573 12.276 77.1289 12.7578C77.2005 13.2331 77.207 13.7344 77.1484 14.2617L76.0352 21H73.4961L74.6387 14.2324C74.6777 13.8678 74.6647 13.5423 74.5996 13.2559C74.541 12.9629 74.4076 12.7285 74.1992 12.5527C73.9909 12.377 73.6849 12.2858 73.2812 12.2793C72.8385 12.2663 72.4544 12.3477 72.1289 12.5234C71.8034 12.6927 71.5267 12.9271 71.2988 13.2266C71.071 13.5195 70.8887 13.8516 70.752 14.2227C70.6217 14.5872 70.5273 14.9583 70.4688 15.3359ZM84.2773 18.7539L85.0488 13.8418C85.0879 13.5293 85.0684 13.2461 84.9902 12.9922C84.9186 12.7318 84.7819 12.5234 84.5801 12.3672C84.3783 12.2109 84.1048 12.1296 83.7598 12.123C83.4538 12.1165 83.1706 12.1686 82.9102 12.2793C82.6562 12.39 82.4414 12.5495 82.2656 12.7578C82.0898 12.9661 81.9694 13.2201 81.9043 13.5195L79.3848 13.5391C79.4238 12.9661 79.5898 12.4714 79.8828 12.0547C80.1758 11.6315 80.5469 11.2865 80.9961 11.0195C81.4453 10.7461 81.9336 10.5443 82.4609 10.4141C82.9883 10.2839 83.5059 10.2253 84.0137 10.2383C84.7363 10.2513 85.3809 10.4043 85.9473 10.6973C86.5137 10.9902 86.9466 11.4069 87.2461 11.9473C87.5456 12.4811 87.6562 13.1322 87.5781 13.9004L86.8262 18.5098C86.7676 18.8874 86.7253 19.278 86.6992 19.6816C86.6732 20.0788 86.7253 20.4596 86.8555 20.8242L86.8457 21L84.3555 21.0098C84.2448 20.6452 84.1895 20.2708 84.1895 19.8867C84.196 19.5026 84.2253 19.125 84.2773 18.7539ZM85.3418 14.5645L85.0879 16.0977L83.6328 16.0879C83.3333 16.0879 83.0306 16.1204 82.7246 16.1855C82.4251 16.2507 82.1452 16.3548 81.8848 16.498C81.6243 16.6348 81.4062 16.8203 81.2305 17.0547C81.0547 17.2891 80.9473 17.5755 80.9082 17.9141C80.8757 18.1745 80.9049 18.4023 80.9961 18.5977C81.0872 18.793 81.224 18.9492 81.4062 19.0664C81.5951 19.1771 81.8197 19.2357 82.0801 19.2422C82.4382 19.2487 82.7897 19.1803 83.1348 19.0371C83.4798 18.8874 83.7793 18.679 84.0332 18.4121C84.2936 18.1452 84.4727 17.8359 84.5703 17.4844L85.166 18.6172C85.0228 19.0013 84.8275 19.3529 84.5801 19.6719C84.3327 19.9909 84.0462 20.2676 83.7207 20.502C83.3952 20.7298 83.0404 20.9056 82.6562 21.0293C82.2786 21.1595 81.8815 21.2214 81.4648 21.2148C80.8789 21.2018 80.3418 21.0651 79.8535 20.8047C79.3717 20.5443 78.9909 20.1829 78.7109 19.7207C78.431 19.2585 78.304 18.7246 78.3301 18.1191C78.3626 17.429 78.5352 16.8561 78.8477 16.4004C79.1667 15.9382 79.5768 15.5736 80.0781 15.3066C80.5794 15.0397 81.1263 14.8477 81.7188 14.7305C82.3177 14.6133 82.9069 14.5547 83.4863 14.5547L85.3418 14.5645ZM95.3418 10.4336L95.0195 12.2891H89.1309L89.4531 10.4336H95.3418ZM91.4746 7.83594H93.9941L92.2656 17.9727C92.2396 18.2005 92.2396 18.3958 92.2656 18.5586C92.2982 18.7214 92.373 18.8483 92.4902 18.9395C92.6139 19.0306 92.7995 19.0794 93.0469 19.0859C93.1836 19.0924 93.3203 19.0859 93.457 19.0664C93.6003 19.0469 93.7402 19.0306 93.877 19.0176L93.7012 20.9707C93.4538 21.0423 93.2031 21.0944 92.9492 21.127C92.6953 21.166 92.4382 21.1855 92.1777 21.1855C91.5723 21.1725 91.0775 21.0358 90.6934 20.7754C90.3158 20.515 90.0488 20.1602 89.8926 19.7109C89.7363 19.2552 89.6842 18.7376 89.7363 18.1582L91.4746 7.83594ZM101.709 15.8242L97.998 15.8145L98.3691 13.7051L101.797 13.7148C102.311 13.7148 102.78 13.627 103.203 13.4512C103.633 13.2689 103.988 13.002 104.268 12.6504C104.548 12.2923 104.723 11.8464 104.795 11.3125C104.86 10.8633 104.827 10.4629 104.697 10.1113C104.574 9.75326 104.359 9.47005 104.053 9.26172C103.753 9.04688 103.369 8.92969 102.9 8.91016L100.078 8.90039L97.9785 21H95.3516L97.8125 6.78125L102.979 6.79102C103.87 6.81055 104.665 7.0026 105.361 7.36719C106.064 7.72526 106.605 8.23633 106.982 8.90039C107.36 9.55794 107.51 10.3555 107.432 11.293C107.347 12.3216 107.031 13.1745 106.484 13.8516C105.938 14.5221 105.244 15.0202 104.404 15.3457C103.564 15.6647 102.666 15.8242 101.709 15.8242ZM113.555 18.7539L114.326 13.8418C114.365 13.5293 114.346 13.2461 114.268 12.9922C114.196 12.7318 114.059 12.5234 113.857 12.3672C113.656 12.2109 113.382 12.1296 113.037 12.123C112.731 12.1165 112.448 12.1686 112.188 12.2793C111.934 12.39 111.719 12.5495 111.543 12.7578C111.367 12.9661 111.247 13.2201 111.182 13.5195L108.662 13.5391C108.701 12.9661 108.867 12.4714 109.16 12.0547C109.453 11.6315 109.824 11.2865 110.273 11.0195C110.723 10.7461 111.211 10.5443 111.738 10.4141C112.266 10.2839 112.783 10.2253 113.291 10.2383C114.014 10.2513 114.658 10.4043 115.225 10.6973C115.791 10.9902 116.224 11.4069 116.523 11.9473C116.823 12.4811 116.934 13.1322 116.855 13.9004L116.104 18.5098C116.045 18.8874 116.003 19.278 115.977 19.6816C115.951 20.0788 116.003 20.4596 116.133 20.8242L116.123 21L113.633 21.0098C113.522 20.6452 113.467 20.2708 113.467 19.8867C113.473 19.5026 113.503 19.125 113.555 18.7539ZM114.619 14.5645L114.365 16.0977L112.91 16.0879C112.611 16.0879 112.308 16.1204 112.002 16.1855C111.702 16.2507 111.423 16.3548 111.162 16.498C110.902 16.6348 110.684 16.8203 110.508 17.0547C110.332 17.2891 110.225 17.5755 110.186 17.9141C110.153 18.1745 110.182 18.4023 110.273 18.5977C110.365 18.793 110.501 18.9492 110.684 19.0664C110.872 19.1771 111.097 19.2357 111.357 19.2422C111.715 19.2487 112.067 19.1803 112.412 19.0371C112.757 18.8874 113.057 18.679 113.311 18.4121C113.571 18.1452 113.75 17.8359 113.848 17.4844L114.443 18.6172C114.3 19.0013 114.105 19.3529 113.857 19.6719C113.61 19.9909 113.324 20.2676 112.998 20.502C112.673 20.7298 112.318 20.9056 111.934 21.0293C111.556 21.1595 111.159 21.2214 110.742 21.2148C110.156 21.2018 109.619 21.0651 109.131 20.8047C108.649 20.5443 108.268 20.1829 107.988 19.7207C107.708 19.2585 107.581 18.7246 107.607 18.1191C107.64 17.429 107.812 16.8561 108.125 16.4004C108.444 15.9382 108.854 15.5736 109.355 15.3066C109.857 15.0397 110.404 14.8477 110.996 14.7305C111.595 14.6133 112.184 14.5547 112.764 14.5547L114.619 14.5645ZM120.986 19.7012L125.303 10.4336H128.086L121.895 22.6113C121.719 22.9889 121.517 23.3405 121.289 23.666C121.061 23.9915 120.801 24.278 120.508 24.5254C120.221 24.7728 119.896 24.9616 119.531 25.0918C119.173 25.2285 118.77 25.2969 118.32 25.2969C118.105 25.2969 117.894 25.2773 117.686 25.2383C117.477 25.1992 117.272 25.1569 117.07 25.1113L117.246 23.168C117.318 23.1745 117.389 23.181 117.461 23.1875C117.533 23.194 117.601 23.2005 117.666 23.207C118.018 23.2135 118.327 23.168 118.594 23.0703C118.861 22.9792 119.092 22.8327 119.287 22.6309C119.489 22.4355 119.668 22.1849 119.824 21.8789L120.986 19.7012ZM121.211 10.4336L122.217 18.3438L122.139 20.9707L120.42 21.2832L118.584 10.4336H121.211Z" fill="white" />
        <path d="M11.4146 16.1515C11.0849 16.3398 10.6624 16.2083 10.502 15.8679L8.6882 12.0177C8.53699 11.6966 8.91654 11.3863 9.20878 11.5921L11.3513 13.101C11.4623 13.1789 11.5915 13.2269 11.7264 13.2404C11.8614 13.2539 11.9975 13.2324 12.1217 13.1781L21.8891 8.89939C20.1339 6.88598 17.248 5.572 13.9853 5.572C8.63519 5.572 4.298 9.1048 4.298 13.4626C4.298 15.891 5.64481 18.0632 7.76318 19.5106C7.80199 19.5371 7.82992 19.5765 7.84158 19.6218C7.90371 19.8625 7.90342 20.1147 7.84119 20.3555L7.41695 21.9962C7.36481 22.2549 7.64666 22.4535 7.87833 22.3211L10.0078 21.1039C10.2485 20.9666 10.5238 20.9017 10.8006 20.9169L10.7977 20.9155C11.796 21.1988 12.8684 21.3532 13.9853 21.3532C19.3354 21.3532 23.6726 17.8205 23.6726 13.4627C23.6726 12.135 23.2694 10.8843 22.5583 9.78649L11.4146 16.1515Z" fill="white" />
    </svg>
)
const ButtonApplePay = () => (
    <svg width="108" height="28" viewBox="0 0 108 28" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M35.7719 7.16535C35.2455 7.79213 34.4083 8.29078 33.5737 8.21835C33.4646 7.3687 33.8819 6.46335 34.3537 5.91178C34.8828 5.26549 35.791 4.80306 36.5355 4.76685C36.6255 5.6527 36.2792 6.52185 35.7719 7.16256V7.16535ZM36.5246 8.3827C36.9965 8.41892 38.3546 8.56656 39.2246 9.87306C39.151 9.92877 37.6128 10.8313 37.6292 12.7256C37.6483 14.9904 39.5846 15.7453 39.6037 15.7621C39.5846 15.8178 39.2983 16.829 38.5892 17.8792C37.9755 18.7985 37.3401 19.7011 36.3255 19.7178C35.3465 19.7373 35.0219 19.1328 33.8983 19.1328C32.7746 19.1328 32.4119 19.7011 31.4901 19.7373C30.511 19.7735 29.7692 18.7623 29.1528 17.843C27.8846 15.9821 26.9246 12.5975 28.2283 10.316C28.8637 9.17385 30.0228 8.45513 31.2719 8.43842C32.2319 8.41892 33.1183 9.08192 33.6992 9.08192C34.2801 9.08192 35.3083 8.31028 36.5246 8.38549V8.3827ZM48.6283 5.81985C51.2655 5.81985 53.101 7.66399 53.101 10.3522C53.101 13.0516 51.2274 14.9068 48.5601 14.9068H45.6419V19.6231H43.531V5.81706H48.6283V5.81985ZM45.6365 13.1045H48.0583C49.8965 13.1045 50.941 12.1016 50.941 10.3606C50.941 8.61949 49.8965 7.6222 48.0692 7.6222H45.6365V13.1045ZM53.6246 16.7593C53.6246 14.9904 54.9528 13.9736 57.4019 13.8232L60.031 13.6616V12.8956C60.031 11.7757 59.3055 11.1628 58.0128 11.1628C56.9492 11.1628 56.1774 11.72 56.0165 12.5696H54.1128C54.1701 10.7812 55.8283 9.47749 58.0701 9.47749C60.4837 9.47749 62.0574 10.7617 62.0574 12.7507V19.6203H60.1074V17.9656H60.0583C59.5019 19.0464 58.2774 19.7261 56.9492 19.7261C54.991 19.7261 53.6219 18.5394 53.6219 16.7593H53.6246ZM60.031 15.8679V15.0963L57.6855 15.2495C56.3655 15.3331 55.6783 15.8345 55.6783 16.7036C55.6783 17.5449 56.3928 18.0909 57.5137 18.0909C58.9455 18.0909 60.031 17.1605 60.031 15.8707V15.8679ZM63.8492 23.3141V21.6594C63.9828 21.6761 64.3019 21.6956 64.471 21.6956C65.4037 21.6956 65.9328 21.2945 66.2519 20.261L66.4428 19.6481L62.8701 9.60285H65.0737L67.561 17.7538H67.6101L70.0974 9.60285H72.2437L68.5455 20.1579C67.6974 22.5815 66.7265 23.3726 64.6728 23.3726C64.5119 23.3726 63.991 23.3559 63.8546 23.3169L63.8492 23.3141Z" fill="white" />
    </svg>

)

export const getStaticProps = async ({ locale }) => ({
    props: {
        ...await serverSideTranslations(locale, ['common', 'subscrible']),
    },
})
export default observer(Paystate)